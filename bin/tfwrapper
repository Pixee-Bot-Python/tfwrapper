#!/usr/bin/env python3
"""Python wrapper for Terraform."""

import argparse
import os
import random
import string
import subprocess
import boto3
import yaml


def load_config(confdir, account='root', environment=None, region=None,
                stack=None):
    """Load configuration from YAML file."""
    if account == 'root':
        with open(confdir + '/root.yml', 'r') as f:
            config = yaml.load(f)
    elif environment == 'global':
        with open('{}/{}_global_{}.yml'.format(confdir, account, stack), 'r') as f:
            config = yaml.load(f)
    else:
        with open('{}/{}_{}_{}_{}.yml'.format(confdir, account, environment, region, stack), 'r') as f:
            config = yaml.load(f)

    return config


def set_aws_env(sts_client, role_arn):
    """Configure AWS env."""
    random_id = ''.join(random.choice(string.ascii_letters) for x in range(10))
    session_name = 'terraform-{}'.format(random_id)

    response = sts_client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=session_name
    )

    os.environ['AWS_ACCESS_KEY_ID'] = response['Credentials']['AccessKeyId']
    os.environ['AWS_SECRET_ACCESS_KEY'] = response['Credentials']['SecretAccessKey']
    os.environ['AWS_SECURITY_TOKEN'] = response['Credentials']['SessionToken']
    os.environ['AWS_SESSION_TOKEN'] = response['Credentials']['SessionToken']


def set_terraform_vars(vars):
    """Configure Terraform env."""
    for var, value in vars.items():
        os.environ['TF_VAR_{}'.format(var)] = value


def bootstrap(args):
    """Bootstrap project."""
    root_config = load_config(args.confdir)
    account = args.account
    environment = args.environment
    region = args.region
    stack = args.stack
    state_account = root_config['aws']['general']['account']
    state_region = root_config['aws']['general']['region']
    state_bucket = "s3.terraform.root-state.{}.{}".format(state_region,
                                                          state_account)

    if not os.path.isdir(account) and not account == 'root':
        if environment == 'global':
            # bootstrap global environment files
            os.makedirs('{}/_global/{}'.format(account, stack))

            with open('{}/_global/{}/main.tf'.format(account, stack), 'w') as f:
                f.write('# {} main terraform file.\n'.format(account))

            # bootstrap remote state
            state_file = "{}/global/{}/terraform.state".format(account, stack)
            subprocess.run(['terraform', 'remote', 'config', '-backend=s3',
                            '-backend-config', 'bucket={}'.format(state_bucket),
                            '-backend-config', 'key={}'.format(state_file),
                            '-backend-config', 'region={}'.format(state_region)],
                           cwd='{}/_global/{}'.format(account, stack))
        else:
            os.makedirs('{}/{}/{}/{}'.format(account, environment, region, stack))

            with open('{}/{}/{}/{}/main.tf'.format(account, environment, region, stack), 'w') as f:
                f.write('# {} main terraform file.\n'.format(account))

            # bootstrap remote state
            state_file = "{}/{}/{}/{}/terraform.state".format(account, environment, region, stack)
            subprocess.run(['terraform', 'remote', 'config', '-backend=s3',
                            '-backend-config', 'bucket={}'.format(state_bucket),
                            '-backend-config', 'key={}'.format(state_file),
                            '-backend-config', 'region={}'.format(state_region)],
                           cwd='{}/{}/{}/{}'.format(account, environment, region, stack))
    else:
        print('Nothing to bootstrap')


def terraform_get(args):
    """Terraform get wrapper function."""
    subprocess.run(["terraform", "get"])


def terraform_plan(args):
    """Terraform plan wrapper function."""
    subprocess.run(["terraform", "plan"])


def terraform_apply(args):
    """Terraform apply wrapper function."""
    subprocess.run(["terraform", "apply"])


def main():
    """Main function."""
    # argparse
    parser = argparse.ArgumentParser(description='Terraform wrapper. ')
    parser.add_argument('-c', '--confdir', help='configuration directory.',
                        default='conf')
    parser.add_argument('-a', '--account', help='target account.',
                        default='root')
    parser.add_argument('-e', '--environment', help='target environment.',
                        default='dev')
    parser.add_argument('-r', '--region', help='target region.',
                        default='eu-west-1')
    parser.add_argument('-s', '--stack', help='target region.',
                        default='default')

    subparsers = parser.add_subparsers(help='subcommands')

    parser_get = subparsers.add_parser('get', help='terraform get')
    parser_get.set_defaults(func=terraform_get)

    parser_plan = subparsers.add_parser('plan', help='terraform plan')
    parser_plan.set_defaults(func=terraform_plan)

    parser_apply = subparsers.add_parser('apply', help='terraform apply')
    parser_apply.set_defaults(func=terraform_apply)

    parser_apply = subparsers.add_parser('bootstrap', help='bootstrap configuration and remote states')
    parser_apply.set_defaults(func=bootstrap)

    args = parser.parse_args()

    # load config
    config = load_config(args.confdir, args.account, args.environment, args.region, args.stack)

    # Open session and get clients
    session = boto3.Session(profile_name=config['aws']['credentials']['profile'],
                            region_name=config['aws']['general']['region'])
    sts_client = session.client('sts')
    role_arn = 'arn:aws:iam::{}:role/{}'.format(config['aws']['general']['account'],
                                                config['aws']['credentials']['role'])

    # set environment variables
    set_aws_env(sts_client, role_arn)
    set_terraform_vars(config['terraform']['vars'])

    # call subcommand
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
