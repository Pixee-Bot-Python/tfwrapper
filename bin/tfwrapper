#!/usr/bin/env python3
"""Python wrapper for Terraform."""

import argparse
import os
import pickle
import random
import shutil
import string
import subprocess
import time
import sys
from copy import deepcopy
from pathlib import Path
from termcolor import colored

import boto3
import botocore
import jinja2
import yaml

RC_OK = 0
RC_KO = 1
RC_UNK = 2

home_dir = str(Path.home())


def load_wrapper_config(args):
    """Load wrapper config from args. Validate args and autodetect current stack."""
    # convert args to dict
    wrapper_config = deepcopy(vars(args))

    # detect confdir and rootdir locations
    parents_count = 0
    while parents_count < 5:
        if os.path.isdir('../' * parents_count + wrapper_config['confdir']):
            wrapper_config['confdir'] = '../' * parents_count + wrapper_config['confdir']
            break
        parents_count += 1

    if parents_count == 5:
        raise ValueError("Cannot find configuration directory '%s' in this directory or above" % wrapper_config['confdir'])

    wrapper_config['rootdir'] = os.path.dirname(os.path.abspath(wrapper_config['confdir']))

    # detect parent dirs
    count_up = 0
    count_down = parents_count

    # check wether we are in global environment
    if (os.path.basename(os.path.abspath('.')) == '_global' or
            os.path.basename(os.path.abspath('..')) == '_global' or
            wrapper_config['environment'] == 'global'):
        parents_list = ['account', 'environment', 'stack']
    else:
        parents_list = ['account', 'environment', 'region', 'stack']

    # detect dirs
    while count_down > 0:
        if wrapper_config[parents_list[count_up]] is None:
            wrapper_config[parents_list[count_up]] = os.path.basename(os.path.abspath('./' + '../' * (count_down - 1)))
        count_down -= 1
        count_up += 1

    for element in parents_list:
        if wrapper_config[element] is None:
            raise ValueError("%s cannot be autodetected. Exiting..." % element)

    # support both _global (fs) and global (param)
    if wrapper_config['environment'] == '_global':
        wrapper_config['environment'] = 'global'

    # load state configuration
    with open(wrapper_config['confdir'] + '/state.yml', 'r') as f:
        state_config = yaml.load(f)

    wrapper_config['state_account'] = state_config['aws']['general']['account']
    wrapper_config['state_region'] = state_config['aws']['general']['region']
    wrapper_config['state_profile'] = state_config['aws']['credentials']['profile']

    return wrapper_config


def load_stack_config(confdir, account, environment, region, stack):
    """Load configuration from YAML file."""
    if environment == 'global':
        with open('{}/{}_global_{}.yml'.format(confdir, account, stack), 'r') as f:
            stack_config = yaml.load(f)
    else:
        with open('{}/{}_{}_{}_{}.yml'.format(confdir, account, environment, region, stack), 'r') as f:
            stack_config = yaml.load(f)

    return stack_config


def get_session(rootdir, account, region, profile):
    """Get or create cached session."""
    session_cache_file = '{}/.run/session_cache_{}.pickle'.format(rootdir, account)

    if (os.path.isfile(session_cache_file) and
            time.time() - os.stat(session_cache_file).st_mtime < 2700):
        with open(session_cache_file, 'rb') as f:
            session_cache = pickle.load(f)
        session = boto3.Session(aws_access_key_id=session_cache['credentials'].access_key,
                                aws_secret_access_key=session_cache['credentials'].secret_key,
                                aws_session_token=session_cache['credentials'].token,
                                region_name=session_cache['region'])
    else:
        try:
            session = boto3.Session(profile_name=profile, region_name=region)
        except botocore.exceptions.ProfileNotFound:
            print("Profile %s not found. Exiting..." % profile, file=sys.stderr)
            sys.exit(RC_KO)
        try:
            session_cache = {'credentials': session.get_credentials().get_frozen_credentials(),
                             'region': session.region_name}
        except botocore.exceptions.ParamValidationError:
            print('Error validating authentication. Maybe the wrong MFA code ?', file=sys.stderr)
            sys.exit(RC_KO)
        except Exception as e:
            print('Unknown error :', file=sys.stderr)
            print(e, file=sys.stderr)
            sys.exit(RC_UNK)
        with os.fdopen(os.open(session_cache_file, os.O_WRONLY | os.O_CREAT,
                               mode=0o600), 'wb') as f:
            pickle.dump(session_cache, f, pickle.HIGHEST_PROTOCOL)

    return session


def set_terraform_vars(vars):
    """Configure Terraform env."""
    for var, value in vars.items():
        if value is not None:
            os.environ['TF_VAR_{}'.format(var)] = value


def get_stack_path(wrapper_config, local=False):
    """Return stack path."""
    rootdir = wrapper_config['rootdir']
    account = wrapper_config['account']
    environment = wrapper_config['environment']
    region = wrapper_config['region']
    stack = wrapper_config['stack']

    if local:
        if environment == 'global':
            stack_path = '{}/{}/_global/{}'.format(rootdir, account, stack)
        else:
            stack_path = '{}/{}/{}/{}/{}'.format(rootdir, account, environment, region, stack)
    else:
        if environment == 'global':
            stack_path = '{}/_global/{}'.format(account, stack)
        else:
            stack_path = '{}/{}/{}/{}'.format(account, environment, region, stack)

    return stack_path


def bootstrap(wrapper_config):
    """Bootstrap project."""
    rootdir = wrapper_config['rootdir']
    confdir = wrapper_config['confdir']
    stack_path = get_stack_path(wrapper_config, local=True)

    account = wrapper_config['account']
    environment = wrapper_config['environment']
    region = wrapper_config['region']
    stack = wrapper_config['stack']

    # bootstrap Terraform files from stack template
    if not os.path.isdir(stack_path):
        if wrapper_config.get('template') is None:
            if environment == 'global':
                template = 'global'
            else:
                template = 'basic'
        else:
            template = wrapper_config['template']

        shutil.copytree('{}/templates/{}'.format(rootdir, template), stack_path)

    # boostrap state.tf from jinja2 template
    if not os.path.isfile('{}/state.tf'.format(stack_path)):
        stack_config = load_stack_config(confdir, account, environment, region, stack)
        client_name = stack_config['terraform']['vars']['client_name']

        jinja2_env = jinja2.Environment(
            loader=jinja2.FileSystemLoader('{}/templates/common'.format(rootdir)))

        state_conf = jinja2_env.get_template('state.tf.jinja2').render(
            client_name=client_name,
            account=account,
            environment=environment,
            region=region,
            stack=stack)

        with open('{}/state.tf'.format(stack_path), "w") as f:
            f.write(state_conf)

        return run_terraform('init', wrapper_config)


def run_terraform(action, wrapper_config):
    """Run Terraform command."""
    rootdir = wrapper_config['rootdir']

    tf_params = wrapper_config.get('tf_params')
    account = wrapper_config['account']
    environment = wrapper_config['environment']
    region = wrapper_config['region']
    stack = wrapper_config['stack']

    # support for custom parameters
    command = ["terraform", action]
    if tf_params is not None:
        if tf_params and tf_params[0] == '--':
            tf_params = tf_params[1:]
        command += tf_params

    if environment == 'global':
        return subprocess.run(command,
                              cwd='{}/{}/_global/{}'.format(rootdir, account, stack)).returncode
    else:
        return subprocess.run(command,
                              cwd='{}/{}/{}/{}/{}'.format(rootdir, account, environment, region, stack)).returncode


def terraform_apply(wrapper_config):
    """Terraform apply wrapper function."""
    bootstrap(wrapper_config)

    # do not force plan if unsafe
    if wrapper_config['unsafe']:
        return run_terraform('apply', wrapper_config)
    else:
        # plan config
        plan_path = '{}/.run/plan_{}'.format(wrapper_config['rootdir'],
                                             ''.join(random.choice(string.ascii_letters) for x in range(10)))
        plan_wrapper_config = deepcopy(wrapper_config)
        plan_wrapper_config['tf_params'][1:1] = ['-out', plan_path]
        plan_return_code = run_terraform('plan', plan_wrapper_config)

        # return Terraform return code if plan fails
        if plan_return_code > 0:
            return plan_return_code

        # ask for confirmation
        colored_account = colored(plan_wrapper_config['account'], 'yellow')
        colored_environment = colored(plan_wrapper_config['environment'], 'red')
        colored_region = colored(plan_wrapper_config['region'], 'blue')
        colored_stack = colored(plan_wrapper_config['stack'], 'green')

        if plan_wrapper_config['environment'] == 'global':
            env_msg = '''
    Account : {}
Environment : {}
      Stack : {}
            '''.format(colored_account, colored_environment, colored_stack)
        else:
            env_msg = '''
    Account : {}
Environment : {}
     Region : {}
      Stack : {}
            '''.format(colored_account, colored_environment, colored_region, colored_stack)

        print('\nDo you really want to apply this plan on the following stack ?', file=sys.stderr)
        print(env_msg, file=sys.stderr)
        apply_input = input("'yes' to confirm : ")

        try:
            if apply_input == 'yes':
                # apply config
                apply_wrapper_config = deepcopy(wrapper_config)
                apply_wrapper_config['tf_params'].append(plan_path)
                apply_return_code = run_terraform('apply', apply_wrapper_config)

                return apply_return_code
            else:
                print('\nAborting apply.', file=sys.stderr)
        finally:
            # delete plan
            os.remove(plan_path)


def terraform_console(wrapper_config):
    """Terraform console wrapper function."""
    return run_terraform('console', wrapper_config)


def terraform_destroy(wrapper_config):
    """Terraform destroy wrapper function."""
    return run_terraform('destroy', wrapper_config)


def terraform_fmt(wrapper_config):
    """Terraform fmt wrapper function."""
    return run_terraform('fmt', wrapper_config)


def terraform_force_unlock(wrapper_config):
    """Terraform force-unlock wrapper function."""
    return run_terraform('force-unlock', wrapper_config)


def terraform_get(wrapper_config):
    """Terraform get wrapper function."""
    # force update
    if not any('-update' in x for x in wrapper_config['tf_params']):
        wrapper_config['tf_params'][1:1] = ['-update']

    # call subcommand
    return run_terraform('get', wrapper_config)


def terraform_graph(wrapper_config):
    """Terraform graph wrapper function."""
    return run_terraform('graph', wrapper_config)


def terraform_import(wrapper_config):
    """Terraform import wrapper function."""
    return run_terraform('import', wrapper_config)


def terraform_init(wrapper_config):
    """Terraform init wrapper function."""
    return run_terraform('init', wrapper_config)


def terraform_output(wrapper_config):
    """Terraform output wrapper function."""
    return run_terraform('output', wrapper_config)


def terraform_plan(wrapper_config):
    """Terraform plan wrapper function."""
    bootstrap(wrapper_config)
    return run_terraform('plan', wrapper_config)


def terraform_refresh(wrapper_config):
    """Terraform refresh wrapper function."""
    return run_terraform('refresh', wrapper_config)


def terraform_show(wrapper_config):
    """Terraform show wrapper function."""
    return run_terraform('show', wrapper_config)


def terraform_state(wrapper_config):
    """Terraform state wrapper function."""
    return run_terraform('state', wrapper_config)


def terraform_taint(wrapper_config):
    """Terraform taint wrapper function."""
    return run_terraform('taint', wrapper_config)


def terraform_untaint(wrapper_config):
    """Terraform untaint wrapper function."""
    return run_terraform('untaint', wrapper_config)


def terraform_validate(wrapper_config):
    """Terraform validate wrapper function."""
    return run_terraform('validate', wrapper_config)


def main():
    """Main function."""
    # terraforms params doc
    tf_params_help = 'Any Terraform parameters after a "--" delimiter'

    # argparse
    parser = argparse.ArgumentParser(description='Terraform wrapper.')
    parser.add_argument('-c', '--confdir',
                        help='Configuration directory. Used to detect the project root. Defaults to conf.',
                        default='conf')
    parser.add_argument('-a', '--account',
                        help='Target account. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-e', '--environment',
                        help='Target environment. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-r', '--region',
                        help='Target region. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-s', '--stack', help='Target stack. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-p', '--plugin-cache-dir', help='Plugins cache directory.',
                        default='{}/.terraform.d/plugin-cache'.format(home_dir))

    subparsers = parser.add_subparsers(help='subcommands')

    parser_apply = subparsers.add_parser('apply', help='terraform apply')
    parser_apply.set_defaults(func=terraform_apply)
    parser_apply.add_argument('-u', '--unsafe',
                              help='Do not force plan and human interaction before apply.',
                              action='store_true', default=False)
    parser_apply.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_console = subparsers.add_parser('console', help='terraform console')
    parser_console.set_defaults(func=terraform_console)
    parser_console.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_destroy = subparsers.add_parser('destroy', help='terraform destroy')
    parser_destroy.set_defaults(func=terraform_destroy)
    parser_destroy.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_fmt = subparsers.add_parser('fmt', help='terraform fmt')
    parser_fmt.set_defaults(func=terraform_fmt)
    parser_fmt.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_force_unlock = subparsers.add_parser('force-unlock', help='terraform force-unlock')
    parser_force_unlock.set_defaults(func=terraform_force_unlock)
    parser_force_unlock.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_get = subparsers.add_parser('get', help='terraform get')
    parser_get.set_defaults(func=terraform_get)
    parser_get.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_graph = subparsers.add_parser('graph', help='terraform graph')
    parser_graph.set_defaults(func=terraform_graph)
    parser_graph.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_import = subparsers.add_parser('import', help='terraform import')
    parser_import.set_defaults(func=terraform_import)
    parser_import.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_init = subparsers.add_parser('init', help='terraform init')
    parser_init.set_defaults(func=terraform_init)
    parser_init.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_output = subparsers.add_parser('output', help='terraform output')
    parser_output.set_defaults(func=terraform_output)
    parser_output.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_plan = subparsers.add_parser('plan', help='terraform plan')
    parser_plan.set_defaults(func=terraform_plan)
    parser_plan.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_refresh = subparsers.add_parser('refresh', help='terraform refresh')
    parser_refresh.set_defaults(func=terraform_refresh)
    parser_refresh.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_show = subparsers.add_parser('show', help='terraform show')
    parser_show.set_defaults(func=terraform_show)
    parser_show.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_state = subparsers.add_parser('state', help='terraform state')
    parser_state.set_defaults(func=terraform_state)
    parser_state.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_taint = subparsers.add_parser('taint', help='terraform taint')
    parser_taint.set_defaults(func=terraform_taint)
    parser_taint.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_untaint = subparsers.add_parser('untaint', help='terraform untaint')
    parser_untaint.set_defaults(func=terraform_untaint)
    parser_untaint.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_validate = subparsers.add_parser('validate', help='terraform validate')
    parser_validate.set_defaults(func=terraform_validate)
    parser_validate.add_argument('tf_params', nargs=argparse.REMAINDER, help=tf_params_help)

    parser_bootstrap = subparsers.add_parser('bootstrap', help='bootstrap configuration')
    parser_bootstrap.set_defaults(func=bootstrap)
    parser_bootstrap.add_argument('template', nargs='?', help='template to use during bootstrap', default=None)

    args = parser.parse_args()

    # process args
    try:
        wrapper_config = load_wrapper_config(args)
    except ValueError as e:
        print(e, file=sys.stderr)
        sys.exit(RC_KO)
    except Exception as e:
        print('Unknown error :', file=sys.stderr)
        print(e, file=sys.stderr)
        sys.exit(RC_UNK)

    # load config
    stack_config = load_stack_config(wrapper_config['confdir'],
                                     wrapper_config['account'],
                                     wrapper_config['environment'],
                                     wrapper_config['region'],
                                     wrapper_config['stack'])

    # get sessions
    print(colored('Getting state session', 'yellow'), file=sys.stderr)
    state_session = get_session(wrapper_config['rootdir'],
                                wrapper_config['state_account'],
                                wrapper_config['state_region'],
                                wrapper_config['state_profile'])

    if 'aws' in stack_config:
        print(colored('Getting stack session', 'yellow'), file=sys.stderr)
        stack_session = get_session(wrapper_config['rootdir'],
                                    stack_config['aws']['general']['account'],
                                    stack_config['aws']['general']['region'],
                                    stack_config['aws']['credentials']['profile'])

    # set terraform environment variables
    if 'aws' in stack_config:
        stack_credentials = stack_session.get_credentials().get_frozen_credentials()
        terraform_vars = stack_config['terraform']['vars']
        terraform_vars['account'] = wrapper_config['account']
        terraform_vars['environment'] = wrapper_config['environment']
        terraform_vars['region'] = wrapper_config['region']
        terraform_vars['stack'] = wrapper_config['stack']
        terraform_vars['aws_access_key'] = stack_credentials.access_key
        terraform_vars['aws_secret_key'] = stack_credentials.secret_key
        terraform_vars['aws_token'] = stack_credentials.token

    # Add support Azure
    if 'azure' in stack_config:
        azure_config = open(os.path.abspath(home_dir) + '/.azurerm/config.yml')
        load_azure_config = yaml.load(azure_config)
        profile = stack_config['azure']['credential']['profile']

        terraform_vars = stack_config['terraform']['vars']
        terraform_vars['azure_subscription_id'] = stack_config['azure']['general']['subscription_id']
        terraform_vars['azure_client_id'] = load_azure_config[profile]['client_id']
        terraform_vars['azure_client_secret'] = load_azure_config[profile]['client_secret']
        terraform_vars['azure_tenant_id'] = load_azure_config[profile]['tenant_id']
        
    set_terraform_vars(terraform_vars)
    os.environ['TF_PLUGIN_CACHE_DIR'] = wrapper_config['plugin_cache_dir']

    # set AWS state centralization environment variables
    state_credentials = state_session.get_credentials().get_frozen_credentials()
    os.environ['AWS_ACCESS_KEY_ID'] = state_credentials.access_key
    os.environ['AWS_SECRET_ACCESS_KEY'] = state_credentials.secret_key
    os.environ['AWS_SESSION_TOKEN'] = state_credentials.token

    # call subcommand
    if hasattr(args, 'func'):
        returncode = args.func(wrapper_config)
    else:
        parser.print_help(file=sys.stderr)

    if returncode is not None:
        sys.exit(returncode)
    else:
        sys.exit(RC_OK)


if __name__ == "__main__":
    main()
