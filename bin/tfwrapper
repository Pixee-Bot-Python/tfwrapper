#!/usr/bin/env python3
"""Python wrapper for Terraform."""

import argparse
import os
import pickle
import random
import shutil
import string
import subprocess
import time

import boto3
import yaml


    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")

def load_config(confdir, account='root', environment=None, region=None,
                stack=None):
    """Load configuration from YAML file."""
    if account == 'root':
        with open(confdir + '/root.yml', 'r') as f:
            config = yaml.load(f)
    elif environment == 'global':
        with open('{}/{}_global_{}.yml'.format(confdir, account, stack), 'r') as f:
            config = yaml.load(f)
    else:
        with open('{}/{}_{}_{}_{}.yml'.format(confdir, account, environment, region, stack), 'r') as f:
            config = yaml.load(f)

    return config


def set_aws_env(sts_client, role_arn):
    """Configure AWS env."""
    random_id = ''.join(random.choice(string.ascii_letters) for x in range(10))
    session_name = 'terraform-{}'.format(random_id)

    response = sts_client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=session_name
    )

    os.environ['AWS_ACCESS_KEY_ID'] = response['Credentials']['AccessKeyId']
    os.environ['AWS_SECRET_ACCESS_KEY'] = response['Credentials']['SecretAccessKey']
    os.environ['AWS_SECURITY_TOKEN'] = response['Credentials']['SessionToken']
    os.environ['AWS_SESSION_TOKEN'] = response['Credentials']['SessionToken']


def set_terraform_vars(vars):
    """Configure Terraform env."""
    for var, value in vars.items():
        os.environ['TF_VAR_{}'.format(var)] = value


def bootstrap(args):
    """Bootstrap project."""
    root_config = load_config(args.confdir)
    account = args.account
    environment = args.environment
    region = args.region
    stack = args.stack
    state_account = root_config['aws']['general']['account']
    state_region = root_config['aws']['general']['region']
    state_bucket = "s3.terraform.root-state.{}.{}".format(state_region,
                                                          state_account)

    if not account == 'root':
        if environment == 'global':
            # bootstrap global environment files
            tf_dir = '{}/_global/{}'.format(account, stack)
            if not os.path.isdir(tf_dir):
                shutil.copytree('templates/global', tf_dir)


            # bootstrap remote state
            state_file = "{}/global/{}/terraform.state".format(account, stack)
            local_state_file = "{}/_global/{}/terraform.tfstate".format(account, stack)
            if not os.path.isfile(state_file):
                subprocess.run(['terraform', 'remote', 'config', '-backend=s3',
                                '-backend-config', 'bucket={}'.format(state_bucket),
                                '-backend-config', 'key={}'.format(state_file),
                                '-backend-config', 'region={}'.format(state_region)],
                               cwd='{}/_global/{}'.format(account, stack))
        else:
            tf_dir = '{}/{}/{}/{}'.format(account, environment, region, stack)
            if not os.path.isdir(tf_dir):
                shutil.copytree('templates/basic', tf_dir)

            # bootstrap remote state
            state_file = "{}/{}/{}/{}/terraform.state".format(account, environment, region, stack)
            local_state_file = "{}/{}/{}/{}/terraform.tfstate".format(account, environment, region, stack)
            if not os.path.isfile(state_file):
                subprocess.run(['terraform', 'remote', 'config', '-backend=s3',
                                '-backend-config', 'bucket={}'.format(state_bucket),
                                '-backend-config', 'key={}'.format(state_file),
                                '-backend-config', 'region={}'.format(state_region)],
                               cwd='{}/{}/{}/{}'.format(account, environment, region, stack))
    else:
        print('Nothing to bootstrap')


def run_terraform(action, args):
    """Run Terraform command."""

    # support for custom parameters
    command = ["terraform", action]
    if hasattr(args, 'tf_params'):
        command.append(tf_params)

    if args.account == 'root':
        subprocess.run(command)
    elif args.environment == 'global':
        subprocess.run(command,
                       cwd='{}/_global/{}'.format(args.account, args.stack))
    else:
        subprocess.run(command,
                       cwd='{}/{}/{}/{}'.format(args.account, args.environment, args.region, args.stack))


def terraform_apply(args):
    """Terraform apply wrapper function."""
    run_terraform('apply', args)


def terraform_destroy(args):
    """Terraform destroy wrapper function."""
    run_terraform('destroy', args)


def terraform_fmt(args):
    """Terraform fmt wrapper function."""
    run_terraform('fmt', args)


def terraform_get(args):
    """Terraform get wrapper function."""
    run_terraform('get', args)


def terraform_graph(args):
    """Terraform graph wrapper function."""
    run_terraform('graph', args)


def terraform_import(args):
    """Terraform import wrapper function."""
    run_terraform('import', args)


def terraform_output(args):
    """Terraform output wrapper function."""
    run_terraform('output', args)


def terraform_plan(args):
    """Terraform plan wrapper function."""
    run_terraform('plan', args)


def terraform_refresh(args):
    """Terraform refresh wrapper function."""
    run_terraform('refresh', args)


def terraform_show(args):
    """Terraform show wrapper function."""
    run_terraform('show', args)


def terraform_taint(args):
    """Terraform taint wrapper function."""
    run_terraform('taint', args)


def terraform_untaint(args):
    """Terraform untaint wrapper function."""
    run_terraform('untaint', args)


def terraform_validate(args):
    """Terraform validate wrapper function."""
    run_terraform('validate', args)


def main():
    """Main function."""
    # argparse
    parser = argparse.ArgumentParser(description='Terraform wrapper. ')
    parser.add_argument('-c', '--confdir', help='configuration directory.',
                        default='conf')
    parser.add_argument('-a', '--account', help='target account.',
                        default='root')
    parser.add_argument('-e', '--environment', help='target environment.',
                        default='dev')
    parser.add_argument('-r', '--region', help='target region.',
                        default='eu-west-1')
    parser.add_argument('-s', '--stack', help='target region.',
                        default='default')

    subparsers = parser.add_subparsers(help='subcommands')
    for subcommand in

    parser_apply = subparsers.add_parser('apply', help='terraform apply')
    parser_apply.set_defaults(func=terraform_apply)
    parser_apply.add_argument('tf_params', nargs='*')

    parser_destroy = subparsers.add_parser('destroy', help='terraform destroy')
    parser_destroy.set_defaults(func=terraform_destroy)
    parser_destroy.add_argument('tf_params', nargs='*')

    parser_fmt = subparsers.add_parser('fmt', help='terraform fmt')
    parser_fmt.set_defaults(func=terraform_fmt)
    parser_fmt.add_argument('tf_params', nargs='*')

    parser_get = subparsers.add_parser('get', help='terraform get')
    parser_get.set_defaults(func=terraform_get)
    parser_get.add_argument('tf_params', nargs='*')

    parser_graph = subparsers.add_parser('graph', help='terraform graph')
    parser_graph.set_defaults(func=terraform_graph)
    parser_graph.add_argument('tf_params', nargs='*')

    parser_import = subparsers.add_parser('import', help='terraform import')
    parser_import.set_defaults(func=terraform_import)
    parser_import.add_argument('tf_params', nargs='*')

    parser_output = subparsers.add_parser('output', help='terraform output')
    parser_output.set_defaults(func=terraform_output)
    parser_output.add_argument('tf_params', nargs='*')

    parser_plan = subparsers.add_parser('plan', help='terraform plan')
    parser_plan.set_defaults(func=terraform_plan)
    parser_plan.add_argument('tf_params', nargs='*')

    parser_refresh = subparsers.add_parser('refresh', help='terraform refresh')
    parser_refresh.set_defaults(func=terraform_refresh)
    parser_refresh.add_argument('tf_params', nargs='*')

    parser_show = subparsers.add_parser('show', help='terraform show')
    parser_show.set_defaults(func=terraform_show)
    parser_show.add_argument('tf_params', nargs='*')

    parser_taint = subparsers.add_parser('taint', help='terraform taint')
    parser_taint.set_defaults(func=terraform_taint)
    parser_taint.add_argument('tf_params', nargs='*')

    parser_untaint = subparsers.add_parser('taint', help='terraform untaint')
    parser_untaint.set_defaults(func=terraform_untaint)
    parser_untaint.add_argument('tf_params', nargs='*')

    parser_validate = subparsers.add_parser('validate', help='terraform validate')
    parser_validate.set_defaults(func=terraform_validate)
    parser_validate.add_argument('tf_params', nargs='*')

    parser_bootstrap = subparsers.add_parser('bootstrap', help='bootstrap configuration and remote states')
    parser_bootstrap.set_defaults(func=bootstrap)

    args = parser.parse_args()

    # load config
    config = load_config(args.confdir, args.account, args.environment, args.region, args.stack)

    # Open session and get clients
    session_cache_file = '.run/session_cache_{}.pickle'.format(args.account)

    if (os.path.isfile(session_cache_file) and
        time.time() - os.stat(session_cache_file).st_mtime < 3600):
        with open(session_cache_file, 'rb') as f:
            session_cache = pickle.load(f)
        session = boto3.Session(aws_access_key_id=session_cache['credentials'].access_key,
                                aws_secret_access_key=session_cache['credentials'].secret_key,
                                aws_session_token=session_cache['credentials'].token,
                                region_name=session_cache['region'])
    else:
        session = boto3.Session(profile_name=config['aws']['credentials']['profile'],
                                region_name=config['aws']['general']['region'])
        session_cache = {'credentials': session.get_credentials().get_frozen_credentials(),
                         'region': session.region_name}
        with os.fdopen(os.open(session_cache_file, os.O_WRONLY | os.O_CREAT, mode=0o600), 'wb') as f:
            pickle.dump(session_cache, f, pickle.HIGHEST_PROTOCOL)

    sts_client = session.client('sts')
    role_arn = 'arn:aws:iam::{}:role/{}'.format(config['aws']['general']['account'],
                                                config['aws']['credentials']['role'])

    # set environment variables
    set_aws_env(sts_client, role_arn)

    terraform_vars = config['terraform']['vars']
    terraform_vars['account'] = args.account
    terraform_vars['environment'] = args.environment
    terraform_vars['region'] = args.region
    terraform_vars['stack'] = args.stack
    set_terraform_vars(terraform_vars)

    # call subcommand
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
